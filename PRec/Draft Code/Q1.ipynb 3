{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Eigenfaces a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[106 130 191 ...  70 183  77]\n",
      " [103 129 185 ...  62 250  72]\n",
      " [103 130 174 ...  83 163  68]\n",
      " ...\n",
      " [ 37  40  22 ...  87 102  93]\n",
      " [ 36  36  19 ...  89  95 103]\n",
      " [ 41  35  17 ...  94 106 110]]\n",
      "(2576, 520)\n",
      "[[ 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  2  3  3  3  3\n",
      "   3  3  3  3  3  3  4  4  4  4  4  4  4  4  4  4  5  5  5  5  5  5  5  5\n",
      "   5  5  6  6  6  6  6  6  6  6  6  6  7  7  7  7  7  7  7  7  7  7  8  8\n",
      "   8  8  8  8  8  8  8  8  9  9  9  9  9  9  9  9  9  9 10 10 10 10 10 10\n",
      "  10 10 10 10 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12\n",
      "  13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 15 15 15 15\n",
      "  15 15 15 15 15 15 16 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17\n",
      "  17 17 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 20 20\n",
      "  20 20 20 20 20 20 20 20 21 21 21 21 21 21 21 21 21 21 22 22 22 22 22 22\n",
      "  22 22 22 22 23 23 23 23 23 23 23 23 23 23 24 24 24 24 24 24 24 24 24 24\n",
      "  25 25 25 25 25 25 25 25 25 25 26 26 26 26 26 26 26 26 26 26 27 27 27 27\n",
      "  27 27 27 27 27 27 28 28 28 28 28 28 28 28 28 28 29 29 29 29 29 29 29 29\n",
      "  29 29 30 30 30 30 30 30 30 30 30 30 31 31 31 31 31 31 31 31 31 31 32 32\n",
      "  32 32 32 32 32 32 32 32 33 33 33 33 33 33 33 33 33 33 34 34 34 34 34 34\n",
      "  34 34 34 34 35 35 35 35 35 35 35 35 35 35 36 36 36 36 36 36 36 36 36 36\n",
      "  37 37 37 37 37 37 37 37 37 37 38 38 38 38 38 38 38 38 38 38 39 39 39 39\n",
      "  39 39 39 39 39 39 40 40 40 40 40 40 40 40 40 40 41 41 41 41 41 41 41 41\n",
      "  41 41 42 42 42 42 42 42 42 42 42 42 43 43 43 43 43 43 43 43 43 43 44 44\n",
      "  44 44 44 44 44 44 44 44 45 45 45 45 45 45 45 45 45 45 46 46 46 46 46 46\n",
      "  46 46 46 46 47 47 47 47 47 47 47 47 47 47 48 48 48 48 48 48 48 48 48 48\n",
      "  49 49 49 49 49 49 49 49 49 49 50 50 50 50 50 50 50 50 50 50 51 51 51 51\n",
      "  51 51 51 51 51 51 52 52 52 52 52 52 52 52 52 52]]\n",
      "(1, 520)\n"
     ]
    }
   ],
   "source": [
    "import scipy.io as sio\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn import preprocessing\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from numpy.linalg import matrix_rank\n",
    "from numpy.linalg import inv\n",
    "\n",
    "mat_content = sio.loadmat('face.mat')\n",
    "\n",
    "face_data = mat_content['X']\n",
    "face_id = mat_content['l']\n",
    "\n",
    "print(face_data)\n",
    "print(face_data.shape)\n",
    "\n",
    "print(face_id)\n",
    "print(face_id.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 87 164 128 ... 210  97  91]\n",
      " [ 61 169 122 ... 158  96  90]\n",
      " [ 67 176 122 ... 123  90  92]\n",
      " ...\n",
      " [ 12  32 106 ...  28  56 105]\n",
      " [ 11  29 105 ...  31  57 111]\n",
      " [ 12  27 108 ...  31  54 112]]\n",
      "(2576, 416)\n",
      "[[ 99 251 251 ... 110  90 254]\n",
      " [100 250 253 ...  88  92 253]\n",
      " [100 249 253 ...  89  93 253]\n",
      " ...\n",
      " [114 126 158 ... 184  44  69]\n",
      " [118  93 153 ...  30  54  64]\n",
      " [120  78 165 ...  42  47  63]]\n",
      "(2576, 104)\n"
     ]
    }
   ],
   "source": [
    "# Split data set\n",
    "# Train_id is the index of each train data in the total data set, test_id the same\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "indices = np.arange(len(face_id[0]))\n",
    "train_data, test_data, train_id, test_id = train_test_split(face_data.T, indices, test_size = 0.2)\n",
    "train_data = train_data.T\n",
    "test_data = test_data.T\n",
    "\n",
    "print(train_data)\n",
    "print(train_data.shape)\n",
    "print(test_data)\n",
    "print(test_data.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1: 9,\n",
       " 2: 7,\n",
       " 3: 9,\n",
       " 4: 9,\n",
       " 5: 5,\n",
       " 6: 8,\n",
       " 7: 10,\n",
       " 8: 8,\n",
       " 9: 8,\n",
       " 10: 10,\n",
       " 11: 5,\n",
       " 12: 7,\n",
       " 13: 7,\n",
       " 14: 7,\n",
       " 15: 9,\n",
       " 16: 10,\n",
       " 17: 8,\n",
       " 18: 8,\n",
       " 19: 9,\n",
       " 20: 7,\n",
       " 21: 10,\n",
       " 22: 9,\n",
       " 23: 9,\n",
       " 24: 7,\n",
       " 25: 8,\n",
       " 26: 6,\n",
       " 27: 8,\n",
       " 28: 9,\n",
       " 29: 10,\n",
       " 30: 8,\n",
       " 31: 8,\n",
       " 32: 8,\n",
       " 33: 9,\n",
       " 34: 6,\n",
       " 35: 7,\n",
       " 36: 9,\n",
       " 37: 8,\n",
       " 38: 7,\n",
       " 39: 9,\n",
       " 40: 9,\n",
       " 41: 9,\n",
       " 42: 9,\n",
       " 43: 9,\n",
       " 44: 6,\n",
       " 45: 8,\n",
       " 46: 6,\n",
       " 47: 7,\n",
       " 48: 8,\n",
       " 49: 6,\n",
       " 50: 7,\n",
       " 51: 8,\n",
       " 52: 9}"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Count the number of face images for each person \n",
    "# in the train and test set after randomly split\n",
    "\n",
    "train_label = face_id[0,train_id]\n",
    "unique_train, counts_train = np.unique(train_label, return_counts=True)\n",
    "dict(zip(unique_train, counts_train))\n",
    "\n",
    "#test_label = face_id[0,test_id]\n",
    "#unique_test, counts_test = np.unique(test_label, return_counts=True)\n",
    "#dict(zip(unique_test, counts_test))\n",
    "\n",
    "#print(unique_train)\n",
    "#print(train_label)\n",
    "#print(counts_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7c1b5e6128>"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compute average face vector\n",
    "\n",
    "num_train = len(train_data[0])\n",
    "\n",
    "avg_face = train_data.mean(axis=1)\n",
    "\n",
    "plt.imshow(np.reshape(avg_face,(46,56)).T, cmap = 'gist_gray')\n",
    "\n",
    "#print(train_data.shape)\n",
    "#print(num_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compute covariance matrix without low-dimensional compution\n",
    "\n",
    "num_pix = len(train_data)\n",
    "\n",
    "A = train_data - avg_face.reshape(num_pix,1)\n",
    "S = (A.dot(A.T)) / num_train\n",
    "\n",
    "#print(num_pix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compute the egenvalues\n",
    "# Due to numerical error, some eigenvalues are complex but they have\n",
    "# negligible imaginary parts. Morover real symetric covariance \n",
    "# matrix always has real eigenvalues and eigenvectors.\n",
    "\n",
    "eigvals, eigvecs = np.linalg.eig(S)\n",
    "eigvals = eigvals.real\n",
    "eigvecs = eigvecs.real"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2576,)\n",
      "(2576, 2576)\n",
      "(415,)\n",
      "(2576, 415)\n"
     ]
    }
   ],
   "source": [
    "# Compute the nonzero eigenvalues and their eigenvectors\n",
    "\n",
    "print(eigvals.shape)\n",
    "print(eigvecs.shape)\n",
    "\n",
    "nonzero_eigvals = eigvals[abs(eigvals) >= 1e-7]\n",
    "print(nonzero_eigvals.shape)\n",
    "\n",
    "eigvecs_nonzero_eigvals = eigvecs[:,abs(eigvals) >= 1e-7]\n",
    "print(eigvecs_nonzero_eigvals.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n",
      " 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47\n",
      " 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71\n",
      " 72 74 73 75 76 77 78 79 80 81 82 83 86 85 84 87 88 89 91 90 92 93 94 98\n",
      " 97 96 95 99]\n",
      "(2576, 100)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7c1d3d0eb8>"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Choose the eigenvectors with M largest eigenvalues as eigenfaces\n",
    "\n",
    "M = 100 # Number of eigenvectors with M largest eigenvalues to be used\n",
    "\n",
    "sorted_index = np.argsort(-nonzero_eigvals)[:M]\n",
    "print(sorted_index)\n",
    "\n",
    "eigfaces = eigvecs_nonzero_eigvals[:,sorted_index]\n",
    "print(eigfaces.shape)\n",
    "\n",
    "plt.imshow(np.reshape(eigfaces[:,0],(46,56)).T, cmap = 'gist_gray')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Eigenfaces b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "415\n",
      "(2576, 2576)\n",
      "(416, 416)\n"
     ]
    }
   ],
   "source": [
    "# Compute covariance matrix with low-dimensional compution\n",
    "\n",
    "S_low_dim = ((A.T).dot(A)) / num_train\n",
    "\n",
    "print(matrix_rank(A))\n",
    "print(S.shape)\n",
    "print(S_low_dim.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compute the egenvalues \n",
    "\n",
    "eigvals_low_dim, eigvecs_low_dim = np.linalg.eig(S_low_dim)\n",
    "eigvals_low_dim = eigvals_low_dim.real\n",
    "eigvecs_low_dim = eigvecs_low_dim.real"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(416,)\n",
      "(416, 416)\n",
      "(415,)\n",
      "(416, 415)\n"
     ]
    }
   ],
   "source": [
    "# Compute the nonzero eigenvalues and their eigenvectors\n",
    "\n",
    "print(eigvals_low_dim.shape)\n",
    "print(eigvecs_low_dim.shape)\n",
    "\n",
    "nonzero_eigvals_low_dim = eigvals_low_dim[abs(eigvals_low_dim) >= 1e-7]\n",
    "print(nonzero_eigvals_low_dim.shape)\n",
    "\n",
    "eigvecs_nonzero_eigvals_low_dim = eigvecs_low_dim[:,abs(eigvals_low_dim) >= 1e-7]\n",
    "print(eigvecs_nonzero_eigvals_low_dim.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7c074c5ba8>"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Choose the eigenvectors with M largest eigenvalues as eigenfaces and \n",
    "# convert them to the eigenvectors of S and normalize them\n",
    "\n",
    "eigfaces_low_dim_unnormalized = A.dot(eigvecs_nonzero_eigvals_low_dim[:,np.argsort(-nonzero_eigvals_low_dim)[:M]])\n",
    "\n",
    "eigfaces_low_dim = (preprocessing.normalize(eigfaces_low_dim_unnormalized.T, norm='l2')).T\n",
    "\n",
    "#print(eigfaces_low_dim[:,0])\n",
    "#print(eigfaces[:,0])\n",
    "#print(eigfaces_low_dim.shape)\n",
    "\n",
    "plt.imshow(np.reshape(eigfaces_low_dim[:,0],(46,56)).T, cmap = 'gist_gray')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Application of Eigenfaces a (reconstruction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ -277.69316801 -1136.37068151  -235.30066783 ...   -38.22298883\n",
      "     58.35311397   -69.95778143]\n",
      " [ 1147.25174223   624.68167337  -850.70200225 ...   200.65540745\n",
      "    -41.41422521   -85.64177621]\n",
      " [  785.78237228  -926.80203458    60.02373227 ...    65.49526101\n",
      "    -20.36432801     1.97432667]\n",
      " ...\n",
      " [ 1058.73719037 -1063.13832541 -1120.50630685 ...    57.49891715\n",
      "     68.9406361    -91.75369851]\n",
      " [  462.92827238  -148.48862644   217.19142767 ...    17.30309036\n",
      "    -21.77368863    17.44404786]\n",
      " [ 1229.79605733  -179.1449584   1213.76465406 ...   -40.14342227\n",
      "    -48.01041247   -25.56963101]]\n"
     ]
    }
   ],
   "source": [
    "# Project faces onto eigenfaces\n",
    "\n",
    "W = (A.T).dot(eigfaces_low_dim) \n",
    "# the ith row of w represents the projection of the ith image\n",
    "# the number of columns is the number of eigenfaces\n",
    "# the number of rows is number of training data\n",
    "\n",
    "print(W)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "530.4319655165395\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(Text(0.5,1,'Reconstructed'),\n",
       " ([], <a list of 0 Text xticklabel objects>),\n",
       " ([], <a list of 0 Text yticklabel objects>))"
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Face image reconstruction\n",
    "\n",
    "reconstructed_train_data = avg_face.reshape(num_pix,1) + eigfaces_low_dim.dot(W.T)\n",
    "\n",
    "error_train = np.linalg.norm((train_data - reconstructed_train_data),axis=0)\n",
    "print(np.average(error_train))\n",
    "\n",
    "plt.subplot(211),plt.imshow(np.reshape(train_data[:,1],(46,56)).T, cmap = 'gist_gray')\n",
    "plt.title('Original'), plt.xticks([]), plt.yticks([])\n",
    "plt.subplot(212),plt.imshow(np.reshape(reconstructed_train_data[:,1],(46,56)).T, cmap = 'gist_gray')\n",
    "plt.title('Reconstructed'), plt.xticks([]), plt.yticks([])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Application of Eigenfaces b (NN classification)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(104, 100)\n",
      "[40 23 35  9 48 49 26 50 18 46 51 34 32  4 13 28 34 17 11 11 30 27 52 13\n",
      " 14 50 37 39 11 31 27  5 11 44  8 45 24 45 47 17 38 35  2  5  2 24 43 12\n",
      " 38 19 35  5 49 46 49 25  6 30 24  2 12 11 22 38 20 36 46  6 34 12 44 42\n",
      " 26 44 49 37 50 25 14 20  9  8 34 26 20 15  5 33  3 31 47 41 32 51 18 13\n",
      "  1 26 47 44 46 14  5 48]\n",
      "[40, 11, 35, 9, 36, 35, 29, 50, 18, 32, 17, 5, 32, 4, 13, 28, 35, 29, 29, 11, 46, 35, 34, 34, 14, 39, 37, 39, 16, 31, 29, 5, 11, 1, 34, 45, 6, 45, 49, 51, 26, 35, 8, 5, 29, 7, 4, 12, 38, 21, 35, 5, 49, 46, 29, 25, 30, 30, 24, 32, 12, 30, 22, 38, 21, 36, 46, 6, 34, 12, 44, 49, 38, 29, 49, 37, 37, 25, 14, 20, 9, 8, 34, 26, 20, 21, 5, 29, 3, 31, 30, 28, 32, 51, 8, 34, 16, 29, 29, 29, 47, 14, 5, 36]\n"
     ]
    }
   ],
   "source": [
    "A_test = test_data - avg_face.reshape(num_pix,1)\n",
    "W_test = (A_test.T).dot(eigfaces_low_dim)\n",
    "\n",
    "print(W_test.shape)\n",
    "\n",
    "test_results = []\n",
    "for row in W_test:\n",
    "    index = np.argmin(np.linalg.norm(row - W, axis=1))\n",
    "    test_results.append(face_id[0,train_id[index]])\n",
    "    \n",
    "true_results = face_id[0,test_id]\n",
    "\n",
    "print(true_results)\n",
    "print(test_results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5288461538461539\n",
      "[[0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]\n",
      " [0 0 1 ... 0 0 0]\n",
      " ...\n",
      " [0 0 0 ... 1 0 0]\n",
      " [0 0 0 ... 0 1 0]\n",
      " [0 0 0 ... 0 0 0]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "results_error = test_results - true_results\n",
    "\n",
    "success_rate = np.count_nonzero(results_error == 0) / len(true_results)\n",
    "print(success_rate)\n",
    "\n",
    "cm = confusion_matrix(true_results, test_results)\n",
    "\n",
    "print(cm)\n",
    "plt.matshow(cm, cmap = 'Blues')\n",
    "plt.colorbar()\n",
    "plt.ylabel('Actual')\n",
    "plt.xlabel('Predicted')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error: 1064.0\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "j = 5\n",
    "\n",
    "reconstructed_test_data = avg_face.reshape(num_pix,1) + eigfaces_low_dim.dot(W_test.T)\n",
    "\n",
    "error = np.linalg.norm(test_data[:,j].reshape(num_pix,1) - reconstructed_test_data[:,j].reshape(num_pix,1))\n",
    "\n",
    "plt.subplot(211),plt.imshow(np.reshape(test_data[:,j],(46,56)).T, cmap = 'gist_gray')\n",
    "plt.title('Original'), plt.xticks([]), plt.yticks([])\n",
    "plt.subplot(212),plt.imshow(np.reshape(reconstructed_test_data[:,j],(46,56)).T, cmap = 'gist_gray')\n",
    "plt.title('Reconstructed'), plt.xticks([]), plt.yticks([])\n",
    "\n",
    "print(\"Error: \" + str(round(error)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Application of Eigenfaces b (Alternative method learnt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "start = time.time()\n",
    "\n",
    "M_AM = 1\n",
    "\n",
    "def eigspace_generator(data):\n",
    "    num_train = len(data[0])\n",
    "    avg_face = data.mean(axis=1)\n",
    "    num_pix = len(data)\n",
    "    A = data - avg_face.reshape(num_pix,1)\n",
    "    S_low_dim = ((A.T).dot(A)) / num_train\n",
    "    eigvals_low_dim, eigvecs_low_dim = np.linalg.eig(S_low_dim)\n",
    "    eigvals_low_dim = eigvals_low_dim.real\n",
    "    eigvecs_low_dim = eigvecs_low_dim.real\n",
    "    nonzero_eigvals_low_dim = eigvals_low_dim[abs(eigvals_low_dim) >= 1e-7]\n",
    "    eigvecs_nonzero_eigvals_low_dim = eigvecs_low_dim[:,abs(eigvals_low_dim) >= 1e-7]\n",
    "    \n",
    "    eigfaces_low_dim_unnormalized = A.dot(eigvecs_nonzero_eigvals_low_dim[:,np.argsort(-nonzero_eigvals_low_dim)[:M_AM]]) \n",
    "    # Choose all the eigenvectors as eigenfaces in low_dim this case, since the maximum number of eigenfaces would\n",
    "    # not exceed 10\n",
    "    \n",
    "    eigfaces_low_dim = (preprocessing.normalize(eigfaces_low_dim_unnormalized.T, norm='l2')).T\n",
    "    list_eig_space.append(eigfaces_low_dim)\n",
    "    \n",
    "    list_avg_face.append(avg_face)\n",
    "\n",
    "    \n",
    "num_people = max(train_label)\n",
    "eig_space = np.zeros((num_people,num_pix,M_AM))\n",
    "sorted_train_data = train_data[:,np.argsort(train_label)]\n",
    "\n",
    "list_eig_space = [] # Each element of list_eig_space contains the eigenspace of the i+1th person\n",
    "list_avg_face = [] # Each element of list_avg_face contains the average face of the i+1th person\n",
    "list_projection = [] # Each element of list_projection contains the projection of the jth test data to different eigenspaces\n",
    "test_results_AM = []\n",
    "\n",
    "# Generate all eigenspaces\n",
    "column = 0\n",
    "for i in range(num_people):\n",
    "    num_faces = train_label.tolist().count(i+1)\n",
    "    eigspace_generator(sorted_train_data[:,column : column + num_faces])\n",
    "    column += num_faces\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[40 23 35  9 48 49 26 50 18 46 51 34 32  4 13 28 34 17 11 11 30 27 52 13\n",
      " 14 50 37 39 11 31 27  5 11 44  8 45 24 45 47 17 38 35  2  5  2 24 43 12\n",
      " 38 19 35  5 49 46 49 25  6 30 24  2 12 11 22 38 20 36 46  6 34 12 44 42\n",
      " 26 44 49 37 50 25 14 20  9  8 34 26 20 15  5 33  3 31 47 41 32 51 18 13\n",
      "  1 26 47 44 46 14  5 48]\n",
      "[34, 23, 35, 9, 36, 34, 29, 50, 18, 32, 17, 34, 32, 4, 2, 28, 35, 29, 11, 11, 30, 27, 34, 13, 16, 39, 37, 39, 2, 31, 27, 5, 47, 33, 34, 39, 19, 45, 33, 26, 38, 35, 8, 5, 17, 24, 4, 12, 38, 19, 35, 5, 29, 46, 18, 25, 17, 30, 4, 2, 12, 11, 22, 48, 20, 36, 46, 6, 39, 12, 44, 42, 42, 44, 49, 37, 37, 25, 14, 20, 13, 8, 34, 26, 20, 4, 2, 17, 3, 27, 47, 28, 32, 51, 18, 13, 1, 43, 29, 29, 42, 22, 2, 36]\n"
     ]
    }
   ],
   "source": [
    "# Project each test data onto each eigenspace\n",
    "for j in range(len(test_data[0])): \n",
    "    error = [];\n",
    "    for i in range(num_people): \n",
    "        avgface_i = np.asarray(list_avg_face[i]).reshape(num_pix,1)\n",
    "        w = ((test_data[:,j].reshape(num_pix,1) - avgface_i).T).dot(list_eig_space[i]) # vector containing projection\n",
    "        reconstructed_data = avgface_i + list_eig_space[i].dot(w.T) \n",
    "        error.append(np.linalg.norm(test_data[:,j].reshape(num_pix,1) - reconstructed_data))\n",
    "        #print(test_data[:,j].shape)\n",
    "        #print(reconstructed_data)\n",
    "        #print('/n')\n",
    "    test_results_AM.append(np.argmin(error) + 1)\n",
    "    \n",
    "print(true_results)\n",
    "print (test_results_AM)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.4052705764770508\n"
     ]
    }
   ],
   "source": [
    "end = time.time()\n",
    "print(end - start)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5769230769230769\n",
      "[[1 0 0 ... 0 0 0]\n",
      " [0 1 0 ... 0 0 0]\n",
      " [0 0 1 ... 0 0 0]\n",
      " ...\n",
      " [0 0 0 ... 1 0 0]\n",
      " [0 0 0 ... 0 1 0]\n",
      " [0 0 0 ... 0 0 0]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "results_error_AM = test_results_AM - true_results\n",
    "\n",
    "success_rate_AM = np.count_nonzero(results_error_AM == 0) / len(true_results)\n",
    "print(success_rate_AM)\n",
    "\n",
    "cm_AM = confusion_matrix(true_results, test_results_AM)\n",
    "\n",
    "print(cm_AM)\n",
    "plt.matshow(cm_AM, cmap = 'Blues')\n",
    "plt.colorbar()\n",
    "plt.ylabel('Actual')\n",
    "plt.xlabel('Predicted')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error of same ID: 1650.0       different ID: 2065.0\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "j = 2\n",
    "\n",
    "#same\n",
    "i = true_results[j] - 1\n",
    "\n",
    "avgface_i = np.asarray(list_avg_face[i]).reshape(num_pix,1)\n",
    "w = ((test_data[:,j].reshape(num_pix,1) - avgface_i).T).dot(list_eig_space[i]) # vector containing projection\n",
    "reconstructed_data = avgface_i + list_eig_space[i].dot(w.T) \n",
    "error1 = np.linalg.norm(test_data[:,j].reshape(num_pix,1) - reconstructed_data)\n",
    "\n",
    "plt.subplot(221),plt.imshow(np.reshape(test_data[:,j],(46,56)).T, cmap = 'gist_gray')\n",
    "plt.title('Test data'), plt.xticks([]), plt.yticks([])\n",
    "plt.subplot(223),plt.imshow(np.reshape(reconstructed_data,(46,56)).T, cmap = 'gist_gray')\n",
    "plt.title('Reconstructed of same ID'), plt.xticks([]), plt.yticks([])\n",
    "\n",
    "#different\n",
    "i = 1\n",
    "\n",
    "avgface_i = np.asarray(list_avg_face[i]).reshape(num_pix,1)\n",
    "w = ((test_data[:,j].reshape(num_pix,1) - avgface_i).T).dot(list_eig_space[i]) # vector containing projection\n",
    "reconstructed_data = avgface_i + list_eig_space[i].dot(w.T) \n",
    "error2 = np.linalg.norm(test_data[:,j].reshape(num_pix,1) - reconstructed_data)\n",
    "\n",
    "plt.subplot(222),plt.imshow(np.reshape(test_data[:,j],(46,56)).T, cmap = 'gist_gray')\n",
    "plt.title('Test data'), plt.xticks([]), plt.yticks([])\n",
    "plt.subplot(224),plt.imshow(np.reshape(reconstructed_data,(46,56)).T, cmap = 'gist_gray')\n",
    "plt.title('Reconstructed of different ID'), plt.xticks([]), plt.yticks([])\n",
    "\n",
    "plt.suptitle('Success Case')\n",
    "    \n",
    "print(\"Error of same ID: \" + str(round(error1)) + \"       different ID: \" + str(round(error2)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PCA-LAD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [],
   "source": [
    "sorted_train_data = train_data[:,np.argsort(train_label)]\n",
    "sorted_train_label = train_label[np.argsort(train_label)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compute class mean M, the class mean for the i-th class is the \n",
    "# i-th column vector of M \n",
    "\n",
    "c = len(counts_train) # number of classes\n",
    "M = np.zeros((num_pix, c))\n",
    "\n",
    "list_Sw = [] # Each element of list_Sw contains the with-in scatter matrix of the i+1th class\n",
    "\n",
    "current_index = 0;\n",
    "for idx,cnt in enumerate(counts_train):\n",
    "    X = sorted_train_data[:,current_index : current_index + cnt]\n",
    "    M[:,idx] = (X.mean(axis=1))\n",
    "    A_Sw =  X - M[:,idx].reshape(num_pix,1)\n",
    "    Sw = A_Sw.dot(A_Sw.T)\n",
    "    list_Sw.append(Sw)\n",
    "    current_index += cnt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "51\n",
      "51\n"
     ]
    }
   ],
   "source": [
    "# Compute between-scatter matrix Sb\n",
    "\n",
    "A_Sb =  M - avg_face.reshape(num_pix,1)\n",
    "Sb = A_Sb.dot(A_Sb.T)\n",
    "print(matrix_rank(Sb))\n",
    "print(c-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "364\n",
      "364\n"
     ]
    }
   ],
   "source": [
    "# Compute within-scatter matrix Sw\n",
    "N = num_train\n",
    "Sw = np.zeros((num_pix,num_pix))\n",
    "\n",
    "for i in range(c):\n",
    "    Sw += list_Sw[i]\n",
    "    \n",
    "print(matrix_rank(Sw))\n",
    "print(N-c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [],
   "source": [
    "# PCA to reduce dimenstion to Mpca\n",
    "\n",
    "M_pca= 150\n",
    "    \n",
    "W_pca_unnormalized = A.dot(eigvecs_nonzero_eigvals_low_dim[:,np.argsort(-nonzero_eigvals_low_dim)[:M_pca]]) \n",
    "W_pca = (preprocessing.normalize(W_pca_unnormalized.T, norm='l2')).T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Project Sw and Sb to PCA reduced subspace\n",
    "Sb_pca = (W_pca.T).dot(Sb.dot(W_pca))\n",
    "Sw_pca = (W_pca.T).dot(Sw.dot(W_pca))\n",
    "\n",
    "#print(Sw_pca.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "51\n",
      "(150,)\n",
      "(150, 150)\n",
      "(51,)\n",
      "(150, 51)\n",
      "(150, 50)\n"
     ]
    }
   ],
   "source": [
    "# Perform LDA on the reduced subspace\n",
    "\n",
    "eigvals_lda, eigvecs_lda = np.linalg.eig((inv(Sw_pca)).dot(Sb_pca))\n",
    "eigvals_lda = eigvals_lda.real\n",
    "eigvecs_lda = eigvecs_lda.real\n",
    "\n",
    "print(matrix_rank((inv(Sw_pca)).dot(Sb_pca)))\n",
    "print(eigvals_lda.shape)\n",
    "print(eigvecs_lda.shape)\n",
    "\n",
    "nonzero_eigvals_lda = eigvals_lda[abs(eigvals_lda) >= 1e-7]\n",
    "print(nonzero_eigvals_lda.shape)\n",
    "\n",
    "eigvecs_nonzero_eigvals_lda = eigvecs_lda[:,abs(eigvals_lda) >= 1e-7]\n",
    "print(eigvecs_nonzero_eigvals_lda.shape)\n",
    "\n",
    "M_lda = 50\n",
    "\n",
    "sorted_index_lda = np.argsort(-nonzero_eigvals_lda)[:M_lda]\n",
    "#print(sorted_index_lda)\n",
    "\n",
    "W_lda = eigvecs_nonzero_eigvals_lda[:,sorted_index_lda]\n",
    "print(W_lda.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(104, 150)\n",
      "(104, 50)\n",
      "[40 23 35  9 48 49 26 50 18 46 51 34 32  4 13 28 34 17 11 11 30 27 52 13\n",
      " 14 50 37 39 11 31 27  5 11 44  8 45 24 45 47 17 38 35  2  5  2 24 43 12\n",
      " 38 19 35  5 49 46 49 25  6 30 24  2 12 11 22 38 20 36 46  6 34 12 44 42\n",
      " 26 44 49 37 50 25 14 20  9  8 34 26 20 15  5 33  3 31 47 41 32 51 18 13\n",
      "  1 26 47 44 46 14  5 48]\n",
      "[40, 23, 35, 9, 48, 49, 26, 38, 18, 46, 51, 34, 32, 4, 13, 28, 32, 17, 11, 11, 29, 27, 52, 13, 14, 39, 37, 39, 11, 31, 27, 5, 49, 44, 8, 45, 25, 45, 33, 17, 26, 35, 2, 5, 2, 24, 43, 12, 38, 19, 35, 5, 49, 46, 49, 25, 6, 30, 24, 2, 12, 11, 22, 38, 20, 36, 16, 6, 34, 12, 44, 42, 38, 44, 49, 37, 50, 25, 14, 20, 9, 8, 32, 26, 20, 21, 5, 33, 3, 31, 38, 41, 32, 51, 18, 13, 1, 26, 47, 29, 29, 14, 5, 48]\n"
     ]
    }
   ],
   "source": [
    "# NN-classification\n",
    "\n",
    "# Project train faces onto LDA subspace\n",
    "W_train_pca = (A.T).dot(W_pca)\n",
    "W_train_lda = (W_train_pca).dot(W_lda)\n",
    "\n",
    "A_test_lda = test_data - avg_face.reshape(num_pix,1)\n",
    "\n",
    "# Project test data to PCA subspace\n",
    "W_test_pca = (A_test_lda.T).dot(W_pca) # Coordinates (row vector) on PCA subspace\n",
    "\n",
    "# Project test data to LDA subspace\n",
    "W_test_lda = (W_test_pca).dot(W_lda) # Coordinates (row vector) on LDA subspace\n",
    "\n",
    "print(W_test_pca.shape)\n",
    "print(W_test_lda.shape)\n",
    "\n",
    "test_results_lda = []\n",
    "for row in W_test_lda:\n",
    "    index = np.argmin(np.linalg.norm(row - W_train_lda, axis=1))\n",
    "    test_results_lda.append(face_id[0,train_id[index]])\n",
    "    \n",
    "true_results = face_id[0,test_id]\n",
    "\n",
    "print(true_results)\n",
    "print(test_results_lda)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8557692307692307\n",
      "[[1 0 0 ... 0 0 0]\n",
      " [0 3 0 ... 0 0 0]\n",
      " [0 0 1 ... 0 0 0]\n",
      " ...\n",
      " [0 0 0 ... 1 0 0]\n",
      " [0 0 0 ... 0 2 0]\n",
      " [0 0 0 ... 0 0 1]]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 288x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "results_error_lda = test_results_lda - true_results\n",
    "\n",
    "success_rate = np.count_nonzero(results_error_lda == 0) / len(true_results)\n",
    "print(success_rate)\n",
    "\n",
    "cm = confusion_matrix(true_results, test_results_lda)\n",
    "\n",
    "print(cm)\n",
    "plt.matshow(cm, cmap = 'Blues')\n",
    "plt.colorbar()\n",
    "plt.ylabel('Actual')\n",
    "plt.xlabel('Predicted')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7c1423b780>"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate fisherfaces by converting Wlda back to its original data space\n",
    "\n",
    "fisherfaces = W_pca.dot(W_lda) # Columns are fisherfaces\n",
    "\n",
    "plt.imshow(np.reshape(fisherfaces[:,0],(46,56)).T, cmap = 'gist_gray')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PCA-LDA Ensemble "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "\n",
    "T = 10\n",
    "M0 = 100\n",
    "M1 = 100\n",
    "# Mpca = M0 + M1 should not exceed \n",
    "M_lda = 25\n",
    "n_sample = 7 # number of samples per class\n",
    "\n",
    "# Generate random subspaces \n",
    "def rand_subspace(eigvecs,eigvals):\n",
    "    subspace = eigvecs[:,np.argsort(-eigvals)[ : M0]]\n",
    "    #print(len(eigvals))\n",
    "    index = (np.argsort(eigvals)[ : len(eigvals) - M0]).tolist()\n",
    "    rand_index = random.sample(index, M1)  \n",
    "    subspace = np.concatenate((subspace, eigvecs[:,rand_index]), axis=1)\n",
    "    return subspace\n",
    "\n",
    "# Bagging (from every class)\n",
    "def rand_sample(sorted_train_data,sorted_train_label,counts_train):\n",
    "    sample = list()\n",
    "    label = list()\n",
    "    current_index = 0\n",
    "    for idx,cnt in enumerate(counts_train):\n",
    "        for j in range(n_sample):\n",
    "            index = random.randrange(current_index, current_index + cnt, 1)\n",
    "            sample.append(sorted_train_data[:,index])\n",
    "            label.append(sorted_train_label[index])\n",
    "        current_index += cnt\n",
    "    \n",
    "    return ((np.asarray(sample)).T), np.asarray(label)\n",
    "\n",
    "# Generate eigenspace of data set using PCA\n",
    "def eigspace_generator_ensemble(data):\n",
    "    num_train = len(data[0])\n",
    "    avg_face = data.mean(axis=1)\n",
    "    num_pix = len(data)\n",
    "    A = data - avg_face.reshape(num_pix,1)\n",
    "    S_low_dim = ((A.T).dot(A)) / num_train\n",
    "    eigvals_low_dim, eigvecs_low_dim = np.linalg.eig(S_low_dim)\n",
    "    eigvals_low_dim = eigvals_low_dim.real\n",
    "    eigvecs_low_dim = eigvecs_low_dim.real\n",
    "    nonzero_eigvals_low_dim = eigvals_low_dim[abs(eigvals_low_dim) >= 1e-7]\n",
    "    eigvecs_nonzero_eigvals_low_dim = eigvecs_low_dim[:,abs(eigvals_low_dim) >= 1e-7]\n",
    "    eigfaces_low_dim_unnormalized = A.dot(eigvecs_nonzero_eigvals_low_dim[:,np.argsort(-nonzero_eigvals_low_dim)[:]]) \n",
    "    eigfaces_low_dim = (preprocessing.normalize(eigfaces_low_dim_unnormalized.T, norm='l2')).T\n",
    "    return eigfaces_low_dim, nonzero_eigvals_low_dim\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [],
   "source": [
    "def lda_rand_subspace(W_pca,test_data): # test_data single column vector\n",
    "    \n",
    "    Sb_pca = (W_pca.T).dot(Sb.dot(W_pca))\n",
    "    Sw_pca = (W_pca.T).dot(Sw.dot(W_pca))\n",
    "    \n",
    "    eigvals_lda, eigvecs_lda = np.linalg.eig((inv(Sw_pca)).dot(Sb_pca))\n",
    "    eigvals_lda = eigvals_lda.real\n",
    "    eigvecs_lda = eigvecs_lda.real\n",
    "\n",
    "    nonzero_eigvals_lda = eigvals_lda[abs(eigvals_lda) >= 1e-7]\n",
    "    eigvecs_nonzero_eigvals_lda = eigvecs_lda[:,abs(eigvals_lda) >= 1e-7]\n",
    "    \n",
    "    sorted_index_lda = np.argsort(-nonzero_eigvals_lda)[:M_lda]\n",
    "\n",
    "    W_lda = eigvecs_nonzero_eigvals_lda[:,sorted_index_lda]\n",
    "    \n",
    "    # NN-classification\n",
    "\n",
    "    W_train_pca = (A.T).dot(W_pca)\n",
    "    W_train_lda = (W_train_pca).dot(W_lda)\n",
    "    sorted_W_train_lda = W_train_lda[np.argsort(train_label),:]\n",
    "\n",
    "    A_test_lda = test_data.reshape(num_pix,1) - avg_face.reshape(num_pix,1)\n",
    "\n",
    "    # Project test data to PCA subspace\n",
    "    W_test_pca = (A_test_lda.T).dot(W_pca) # Coordinates (row vector) on PCA subspace\n",
    "    # Project test data to LDA subspace\n",
    "    W_test_lda = (W_test_pca).dot(W_lda) # Coordinates (row vector) on LDA subspace\n",
    "    \n",
    "    distance = np.linalg.norm(W_test_lda - sorted_W_train_lda, axis=1) # row vector containing Euclidiean distance to each tranining data\n",
    "   \n",
    "        \n",
    "    min_distance = []\n",
    "    current_index = 0;\n",
    "    for idx,cnt in enumerate(counts_train):\n",
    "        distance = distance.reshape(len(distance),1)\n",
    "        distance[current_index : current_index + cnt,:]\n",
    "        min_distance.append(min(distance[current_index : current_index + cnt,:]))\n",
    "        current_index += cnt\n",
    "    \n",
    "    post_distribution = (min_distance / sum(min_distance)) \n",
    "    \n",
    "    return post_distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [],
   "source": [
    "def lda_cascade(train_data,train_label,W_pca,test_data): # test_data single column vector\n",
    "\n",
    "\n",
    "    avg_face = train_data.mean(axis=1)\n",
    "    num_pix = len(train_data)\n",
    "    unique_train, counts_train = np.unique(train_label, return_counts=True)\n",
    "    c = max(train_label) # number of classes\n",
    "    M = np.zeros((num_pix, c))\n",
    "\n",
    "    list_Sw = [] # Each element of list_Sw contains the with-in scatter matrix of the i+1th class\n",
    "\n",
    "    current_index = 0;\n",
    "    for idx in range(c):\n",
    "        X = train_data[:,current_index : current_index + n_sample]\n",
    "        M[:,idx] = (X.mean(axis=1))\n",
    "        A_Sw =  X - M[:,idx].reshape(num_pix,1)\n",
    "        Sw = A_Sw.dot(A_Sw.T)\n",
    "        list_Sw.append(Sw)\n",
    "        current_index += n_sample\n",
    "\n",
    "    # Compute between-scatter matrix Sb\n",
    "\n",
    "    A_Sb =  M - avg_face.reshape(num_pix,1)\n",
    "    Sb = A_Sb.dot(A_Sb.T)\n",
    "\n",
    "    # Compute within-scatter matrix Sw\n",
    "    Sw = np.zeros((num_pix,num_pix))\n",
    "\n",
    "    for i in range(c):\n",
    "        Sw += list_Sw[i]\n",
    "\n",
    "    # PCA to reduce dimenstion to Mpca\n",
    "    \n",
    "    Sb_pca = (W_pca.T).dot(Sb.dot(W_pca))\n",
    "    Sw_pca = (W_pca.T).dot(Sw.dot(W_pca))\n",
    "    \n",
    "    eigvals_lda, eigvecs_lda = np.linalg.eig((inv(Sw_pca)).dot(Sb_pca))\n",
    "    eigvals_lda = eigvals_lda.real\n",
    "    eigvecs_lda = eigvecs_lda.real\n",
    "\n",
    "    nonzero_eigvals_lda = eigvals_lda[abs(eigvals_lda) >= 1e-7]\n",
    "    eigvecs_nonzero_eigvals_lda = eigvecs_lda[:,abs(eigvals_lda) >= 1e-7]\n",
    "    \n",
    "    sorted_index_lda = np.argsort(-nonzero_eigvals_lda)[:M_lda]\n",
    "\n",
    "    W_lda = eigvecs_nonzero_eigvals_lda[:,sorted_index_lda]\n",
    "\n",
    "    # NN-classification\n",
    "\n",
    "    W_train_pca = (A.T).dot(W_pca)\n",
    "    W_train_lda = (W_train_pca).dot(W_lda)\n",
    "    sorted_W_train_lda = W_train_lda[np.argsort(train_label),:]\n",
    "\n",
    "    A_test_lda = test_data.reshape(num_pix,1) - avg_face.reshape(num_pix,1)\n",
    "\n",
    "    # Project test data to PCA subspace\n",
    "    W_test_pca = (A_test_lda.T).dot(W_pca) # Coordinates (row vector) on PCA subspace\n",
    "    # Project test data to LDA subspace\n",
    "    W_test_lda = (W_test_pca).dot(W_lda) # Coordinates (row vector) on LDA subspace\n",
    "    \n",
    "    distance = np.linalg.norm(W_test_lda - sorted_W_train_lda, axis=1) # row vector containing Euclidiean distance to each tranining data\n",
    "   \n",
    "        \n",
    "    min_distance = []\n",
    "    current_index = 0;\n",
    "    for idx,cnt in enumerate(counts_train):\n",
    "        distance = distance.reshape(len(distance),1)\n",
    "        distance[current_index : current_index + cnt,:]\n",
    "        min_distance.append(min(distance[current_index : current_index + cnt,:]))\n",
    "        current_index += cnt\n",
    "    \n",
    "    post_distribution = (min_distance / sum(min_distance)) \n",
    "    \n",
    "    return post_distribution"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Cascade two randomization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Bagging\n",
    "\n",
    "S = []\n",
    "S_label = []\n",
    "\n",
    "for i in range(T):\n",
    "    data,label = rand_sample(sorted_train_data,sorted_train_label,counts_train)\n",
    "    S.append(data) # generate T random training subset\n",
    "    S_label.append(label)\n",
    "\n",
    "R = [] \n",
    "for i in range(T):\n",
    "    eigenvectors, eigenvalues = eigspace_generator_ensemble(S[i])\n",
    "    R.append(rand_subspace(eigenvectors,eigenvalues)) # generate T random subspaces\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 6  2 48 36 13 50  7 13 47 26 21 47 20  3 20 25 33 51 41 11 31 31 30  8\n",
      "  3  1 52 15 43 18  7 33 15  4 47 23 10 19 27 17 12 51  4 49  6 42 38  7\n",
      " 17 48  8 51]\n"
     ]
    }
   ],
   "source": [
    "true_results = face_id[0,test_id]\n",
    "print(true_results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[10]\n",
      "[10, 36]\n",
      "[10, 36, 42]\n",
      "[10, 36, 42, 28]\n"
     ]
    }
   ],
   "source": [
    "test_results_ensemble = []\n",
    "for i in range(len(test_data[0])):\n",
    "    post_distribution = [] # each column vector contains posterior distribution of each model\n",
    "    \n",
    "    for j in range(T):\n",
    "        post_distribution.append(lda_cascade(S[j],S_label[j],R[j],test_data[:,i])) # perform lda on each subspaces learnt\n",
    "\n",
    "    sum(post_distribution)\n",
    "    index = np.argmin(sum(post_distribution) / T) + 1\n",
    "    test_results_ensemble.append(index)\n",
    "    print(test_results_ensemble)\n",
    "    \n",
    "print(test_results_ensemble)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "results_error_ensemble = test_results_ensemble - true_results\n",
    "\n",
    "success_rate = np.count_nonzero(results_error_ensemble == 0) / len(true_results)\n",
    "print(success_rate)\n",
    "\n",
    "cm = confusion_matrix(true_results, test_results_ensemble)\n",
    "\n",
    "print(cm)\n",
    "plt.matshow(cm, cmap = 'Blues')\n",
    "plt.colorbar()\n",
    "plt.ylabel('Actual')\n",
    "plt.xlabel('Predicted')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Committe machine with randomized feature space"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[34, 20, 35, 9, 48, 49, 26, 38, 18, 46, 51, 34, 32, 4, 13, 28, 34, 17, 11, 11, 29, 27, 52, 13, 14, 39, 37, 39, 15, 31, 27, 5, 11, 44, 8, 45, 17, 45, 33, 17, 38, 41, 2, 5, 2, 24, 43, 12, 38, 19, 35, 5, 49, 46, 49, 25, 6, 30, 24, 2, 12, 11, 22, 38, 20, 36, 46, 6, 34, 12, 44, 42, 29, 30, 49, 37, 50, 25, 14, 20, 9, 8, 34, 26, 20, 20, 5, 33, 3, 31, 29, 41, 32, 51, 18, 13, 7, 26, 30, 29, 18, 14, 5, 48]\n"
     ]
    }
   ],
   "source": [
    "R = [] \n",
    "for i in range(T):\n",
    "    R.append(rand_subspace(eigvecs_nonzero_eigvals,nonzero_eigvals)) # generate T random subspaces\n",
    "    \n",
    "test_results_ensemble = []\n",
    "for i in range(len(test_data[0])):\n",
    "    post_distribution = [] # each column vector contains posterior distribution of each model\n",
    "    \n",
    "    for j in range(T):\n",
    "        post_distribution.append(lda_rand_subspace(R[j],test_data[:,i])) # perform lda on each subspaces learnt\n",
    "\n",
    "    index = np.argmin(sum(post_distribution) / T) + 1\n",
    "    test_results_ensemble.append(index)\n",
    "    \n",
    "print(test_results_ensemble)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8365384615384616\n",
      "[[0 0 0 ... 0 0 0]\n",
      " [0 3 0 ... 0 0 0]\n",
      " [0 0 1 ... 0 0 0]\n",
      " ...\n",
      " [0 0 0 ... 1 0 0]\n",
      " [0 0 0 ... 0 2 0]\n",
      " [0 0 0 ... 0 0 1]]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 288x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "results_error_ensemble = test_results_ensemble - true_results\n",
    "\n",
    "success_rate = np.count_nonzero(results_error_ensemble == 0) / len(true_results)\n",
    "print(success_rate)\n",
    "\n",
    "cm = confusion_matrix(true_results, test_results_ensemble)\n",
    "\n",
    "print(cm)\n",
    "plt.matshow(cm, cmap = 'Blues')\n",
    "plt.colorbar()\n",
    "plt.ylabel('Actual')\n",
    "plt.xlabel('Predicted')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
